diff -r 0796adbacae6 src/cmd/cgo/gcc.go
--- a/src/cmd/cgo/gcc.go	Thu Nov 12 13:55:20 2009 -0800
+++ b/src/cmd/cgo/gcc.go	Fri Nov 13 13:55:12 2009 +1100
@@ -246,6 +246,7 @@
 	void					ast.Expr;
 	unsafePointer				ast.Expr;
 	string					ast.Expr;
+	bool					ast.Expr;
 
 	ptrSize	int64;
 
@@ -271,6 +272,7 @@
 	c.unsafePointer = c.Ident("unsafe.Pointer");
 	c.void = c.Ident("void");
 	c.string = c.Ident("string");
+	c.bool = c.Ident("bool");
 }
 
 // base strips away qualifiers and typedefs to get the underlying type
@@ -316,9 +318,8 @@
 	t.Align = -1;
 	t.C = dtype.Common().Name;
 	if t.Size < 0 {
-		fatal("dwarf.Type %s reports unknown size", dtype)
+		warn("dwarf.Type \"%s\" is opaque.", dtype)
 	}
-
 	c.m[dtype] = t;
 	switch dt := dtype.(type) {
 	default:
@@ -370,7 +371,6 @@
 			t.Align = c.ptrSize
 		}
 		t.C = "enum " + dt.EnumName;
-
 	case *dwarf.FloatType:
 		switch t.Size {
 		default:
@@ -456,7 +456,11 @@
 				t.C = csyntax
 			}
 			t.Align = align;
-			c.typedef[name.Value] = g;
+			if dt.ByteSize == -1 {
+				c.typedef[name.Value] = c.Opaque(0)
+			} else {
+				c.typedef[name.Value] = g
+			}
 		}
 
 	case *dwarf.TypedefType:
@@ -509,10 +513,15 @@
 	case *dwarf.VoidType:
 		t.Go = c.void;
 		t.C = "void";
+
+	case *dwarf.BoolType:
+		t.Go = c.bool;
+		t.Size = 1;
+		t.Align = 1;
 	}
 
 	switch dtype.(type) {
-	case *dwarf.AddrType, *dwarf.CharType, *dwarf.IntType, *dwarf.FloatType, *dwarf.UcharType, *dwarf.UintType:
+	case *dwarf.AddrType, *dwarf.CharType, *dwarf.IntType, *dwarf.FloatType, *dwarf.UcharType, *dwarf.UintType, *dwarf.BoolType:
 		s := dtype.Common().Name;
 		if s != "" {
 			if ss, ok := cnameMap[s]; ok {
@@ -630,12 +639,15 @@
 			align = t.Align
 		}
 	}
-	if off < dt.ByteSize {
-		fld = c.pad(fld, dt.ByteSize-off);
-		off = dt.ByteSize;
-	}
-	if off != dt.ByteSize {
-		fatal("struct size calculation error")
+	/* ignore size checks and padding if unknown size */
+	if dt.ByteSize != -1 {
+		if off < dt.ByteSize {
+			fld = c.pad(fld, dt.ByteSize-off);
+			off = dt.ByteSize;
+		}
+		if off != dt.ByteSize {
+			fatal("struct size calculation error: %d != %d", off, dt.ByteSize)
+		}
 	}
 	csyntax += "}";
 	expr = &ast.StructType{Fields: fld};
diff -r 0796adbacae6 src/cmd/cgo/util.go
--- a/src/cmd/cgo/util.go	Thu Nov 12 13:55:20 2009 -0800
+++ b/src/cmd/cgo/util.go	Fri Nov 13 13:55:12 2009 +1100
@@ -82,6 +82,11 @@
 	os.Exit(2);
 }
 
+// Warn with an error message.
+func warn(msg string, args ...) {
+	fmt.Fprintf(os.Stderr, msg+"\n", args);
+}
+
 var nerrors int
 var noPos token.Position
 
